{"version":3,"sources":["../src/index.js"],"names":["Enum","React","Immutable","thunk","createStore","applyMiddleware","Provider","connect","resolveData","dataOrPromiseOrFunction","dataOrPromise","then","rolesToMapUpdate","rolesItem","value","result","item","Object","prototype","toString","resolveRoles","ACTIONS","ConfigContext","createContext","defaultState","Map","roles","Set","reducer","state","action","type","MERGE_ROLES","set","get","withMutations","key","remove","add","CLEAR_ROLES","configStore","configConnect","options","Component","mapStateToProps","mapDispatchToProps","ConnectedComponent","context","props","addRoles","dispatch","removeRoles","mergeRoles","clearRoles","wrapWithDispatch","obj","configPick","picked","pick","store"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,UAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,QAAR,EAAkBC,OAAlB,QAAgC,aAAhC,C,CAEA;;AAEA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,uBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,aADY,GACI,OAAOD,uBAAP,KAAmC,UAAnC,GAAgDA,uBAAuB,EAAvE,GAA4EA,uBADhF;;AAAA,kBAEXC,aAAa,IAAIA,aAAa,CAACC,IAFpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEiCD,aAFjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,0BAEiDA,aAFjD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAKA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC7C,MAAI,eAAcD,SAAd,CAAJ,EAA8B;AAC5B,WAAO,wBAAAA,SAAS,MAAT,CAAAA,SAAS,EAAQ,UAACE,MAAD,EAASC,IAAT;AAAA,aAAmBD,MAAM,CAACC,IAAD,CAAN,GAAeF,KAAf,EAAsBC,MAAzC;AAAA,KAAR,EAA0D,EAA1D,CAAhB;AACD,GAFD,MAEO,IAAI,OAAOF,SAAP,KAAqB,QAArB,IAAiCI,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BN,SAA1B,MAAyC,iBAA9E,EAAiG;AACtG,+BAASA,SAAT,EAAqBC,KAArB;AACD,GAFM,MAEA;AACL,WAAO,EAAP;AACD;AACF,CARD;;AAUA,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACP,SAAD,EAAYC,KAAZ;AAAA,SAAsBN,WAAW,CAACK,SAAD,CAAX,CAAuBF,IAAvB,CAA4B,UAAAE,SAAS;AAAA,WAAID,gBAAgB,CAACC,SAAD,EAAYC,KAAZ,CAApB;AAAA,GAArC,CAAtB;AAAA,CAArB;;AAEA,IAAMO,OAAO,GAAGrB,IAAI,CAClB,aADkB,EAElB,aAFkB,CAApB;AAKA,IAAMsB,aAAa,GAAGrB,KAAK,CAACsB,aAAN,EAAtB;AAEA,IAAMC,YAAY,GAAGtB,SAAS,CAACuB,GAAV,CAAc;AACjCC,EAAAA,KAAK,EAAExB,SAAS,CAACyB,GAAV;AAD0B,CAAd,CAArB;;AAIA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,OAAO,CAACW,WAAb;AACE,aAAOH,KAAK,CAACI,GAAN,CAAU,OAAV,EAAmBJ,KAAK,CAACK,GAAN,CAAU,OAAV,EAAmBC,aAAnB,CAAiC,UAAAT,KAAK,EAAI;AAAA;;AAClE,6DAAeI,MAAM,CAACJ,KAAtB,mBAAqC,iBAAkB;AAAA;AAAA,cAAhBU,GAAgB;AAAA,cAAXtB,KAAW;;AACrD,cAAIA,KAAJ,EAAW;AACTY,YAAAA,KAAK,CAACW,MAAN,CAAaD,GAAb;AACD,WAFD,MAEO;AACLV,YAAAA,KAAK,CAACY,GAAN,CAAUF,GAAV;AACD;AACF,SAND;AAOD,OARyB,CAAnB,CAAP;;AASF,SAAKf,OAAO,CAACkB,WAAb;AACE,aAAOV,KAAK,CAACI,GAAN,CAAU,OAAV,EAAmB/B,SAAS,CAACyB,GAAV,EAAnB,CAAP;AAZJ;;AAcA,SAAOE,KAAP;AACD;;AAED,IAAMW,WAAW,GAAGpC,WAAW,CAC7BwB,OAD6B,EAE7BvB,eAAe,CAACF,KAAD,CAFc,CAA/B;;AAKA,IAAMsC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,OAAO;AAAA,SAAI,UAAAC,SAAS,EAAI;AAAA,QACrCC,eADqC,GACEF,OADF,CACrCE,eADqC;AAAA,QACpBC,kBADoB,GACEH,OADF,CACpBG,kBADoB;AAE5C,QAAMC,kBAAkB,GAAGvC,OAAO,CAACqC,eAAD,EAAkBC,kBAAlB,EAAsC,IAAtC,EAA4C;AAACE,MAAAA,OAAO,EAAEzB;AAAV,KAA5C,CAAP,CAA6EqB,SAA7E,CAA3B;AACA,WAAO,UAAAK,KAAK;AAAA,aAAI,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAE1B,aAAnB;AAAkC,QAAA,KAAK,EAAEkB;AAAzC,SAAsD,oBAAC,kBAAD,EAAwBQ,KAAxB,CAAtD,CAAJ;AAAA,KAAZ;AACD,GAJ4B;AAAA,CAA7B;;AAMA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAvB,KAAK;AAAA,SAAI,UAAAwB,QAAQ;AAAA,WAAI9B,YAAY,CAACM,KAAD,EAAQ,IAAR,CAAZ,CAA0Bf,IAA1B,CAA+B,UAAAe,KAAK;AAAA,aAAIwB,QAAQ,CAAC;AAACnB,QAAAA,IAAI,EAAEV,OAAO,CAACW,WAAf;AAA4BN,QAAAA,KAAK,EAALA;AAA5B,OAAD,CAAZ;AAAA,KAApC,CAAJ;AAAA,GAAZ;AAAA,CAAtB;;AACA,IAAMyB,WAAW,GAAG,SAAdA,WAAc,CAAAzB,KAAK;AAAA,SAAI,UAAAwB,QAAQ;AAAA,WAAI9B,YAAY,CAACM,KAAD,EAAQ,KAAR,CAAZ,CAA2Bf,IAA3B,CAAgC,UAAAe,KAAK;AAAA,aAAIwB,QAAQ,CAAC;AAACnB,QAAAA,IAAI,EAAEV,OAAO,CAACW,WAAf;AAA4BN,QAAAA,KAAK,EAALA;AAA5B,OAAD,CAAZ;AAAA,KAArC,CAAJ;AAAA,GAAZ;AAAA,CAAzB;;AACA,IAAM0B,UAAU,GAAG,SAAbA,UAAa,CAAA1B,KAAK;AAAA,SAAI,UAAAwB,QAAQ;AAAA,WAAI1C,WAAW,CAACkB,KAAD,CAAX,CAAmBf,IAAnB,CAAwB,UAAAe,KAAK;AAAA,aAAIwB,QAAQ,CAAC;AAACnB,QAAAA,IAAI,EAAEV,OAAO,CAACW,WAAf;AAA4BN,QAAAA,KAAK,EAALA;AAA5B,OAAD,CAAZ;AAAA,KAA7B,CAAJ;AAAA,GAAZ;AAAA,CAAxB;;AACA,IAAM2B,UAAU,GAAG,SAAbA,UAAa,CAAAH,QAAQ;AAAA,SAAIA,QAAQ,CAAC;AAACnB,IAAAA,IAAI,EAAEV,OAAO,CAACkB;AAAf,GAAD,CAAZ;AAAA,CAA3B;;AAEA,OAAO,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,QAAD,EAAWK,GAAX;AAAA;;AAAA,SAAmB,oDAAeA,GAAf,mBAA2B,UAACxC,MAAD;AAAA;AAAA,QAAUqB,GAAV;AAAA,QAAetB,KAAf;;AAAA,WAA2BC,MAAM,CAACqB,GAAD,CAAN,GAAc;AAAA,aAAac,QAAQ,CAACpC,KAAK,MAAL,mBAAD,CAArB;AAAA,KAAd,EAAqDC,MAAhF;AAAA,GAA3B,EAAoH,EAApH,CAAnB;AAAA,CAAzB;AAEP,OAAO,IAAMyC,UAAU,GAAG,SAAbA,UAAa,GAAe;AAAA,oCAAXC,MAAW;AAAXA,IAAAA,MAAW;AAAA;;AACvC,WAASZ,kBAAT,CAA4BK,QAA5B,EAAsC;AACpC,QAAMnC,MAAM,GAAG,EAAf;AADoC;AAAA;AAAA;;AAAA;AAEpC,wCAAmB0C,MAAnB,4GAA2B;AAAA,YAAhBC,IAAgB;;AACzB,gBAAQA,IAAR;AACE,eAAK,KAAL;AACE3C,YAAAA,MAAM,CAACkC,QAAP,GAAkBA,QAAlB;AACA;;AACF,eAAK,QAAL;AACElC,YAAAA,MAAM,CAACoC,WAAP,GAAqBA,WAArB;AACA;;AACF,eAAK,OAAL;AACEpC,YAAAA,MAAM,CAACqC,UAAP,GAAoBA,UAApB;AACA;;AACF,eAAK,OAAL;AACErC,YAAAA,MAAM,CAACsC,UAAP,GAAoBA,UAApB;AACA;AAZJ;AAcD;AAjBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBpC,WAAOC,gBAAgB,CAACJ,QAAD,EAAWnC,MAAX,CAAvB;AACD;;AAED,WAAS6B,eAAT,CAAyBe,KAAzB,EAAgCX,KAAhC,EAAuC;AACrC,QAAMjC,MAAM,GAAG,EAAf;AADqC;AAAA;AAAA;;AAAA;AAErC,yCAAmB0C,MAAnB,iHAA2B;AAAA,YAAhBC,IAAgB;;AACzB,gBAAQA,IAAR;AAED;AALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMrC,WAAO3C,MAAP;AACD;;AACD,SAAO0B,aAAa,CAAC;AAACG,IAAAA,eAAe,EAAfA,eAAD;AAAkBC,IAAAA,kBAAkB,EAAlBA;AAAlB,GAAD,CAApB;AACD,CA/BM","sourcesContent":["import Enum from 'es6-enum'\nimport React from 'react'\nimport Immutable from 'immutable'\n\nimport thunk from 'redux-thunk'\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider, connect} from 'react-redux'\n\n// simple utilities\n\nconst resolveData = async dataOrPromiseOrFunction => {\n  const dataOrPromise = typeof dataOrPromiseOrFunction === 'function' ? dataOrPromiseOrFunction() : dataOrPromiseOrFunction\n  return dataOrPromise && dataOrPromise.then ? await dataOrPromise : dataOrPromise\n}\n\nconst rolesToMapUpdate = (rolesItem, value) => {\n  if (Array.isArray(rolesItem)) {\n    return rolesItem.reduce((result, item) => (result[item] = value, result), {})\n  } else if (typeof rolesItem === 'string' || Object.prototype.toString(rolesItem) === '[object String]') {\n    return {[rolesItem]: value}\n  } else {\n    return {}\n  }\n}\n\nconst resolveRoles = (rolesItem, value) => resolveData(rolesItem).then(rolesItem => rolesToMapUpdate(rolesItem, value))\n\nconst ACTIONS = Enum(\n  'MERGE_ROLES',\n  'CLEAR_ROLES',\n)\n\nconst ConfigContext = React.createContext()\n\nconst defaultState = Immutable.Map({\n  roles: Immutable.Set(),\n})\n\nfunction reducer(state = defaultState, action) {\n  switch (action.type) {\n    case ACTIONS.MERGE_ROLES:\n      return state.set('roles', state.get('roles').withMutations(roles => {\n        Object.entries(action.roles).forEach(([key, value]) => {\n          if (value) {\n            roles.remove(key)\n          } else {\n            roles.add(key)\n          }\n        })\n      }))\n    case ACTIONS.CLEAR_ROLES:\n      return state.set('roles', Immutable.Set())\n  }\n  return state\n}\n\nconst configStore = createStore(\n  reducer,\n  applyMiddleware(thunk),\n)\n\nconst configConnect = options => Component => {\n  const {mapStateToProps, mapDispatchToProps} = options\n  const ConnectedComponent = connect(mapStateToProps, mapDispatchToProps, null, {context: ConfigContext})(Component)\n  return props => <Provider context={ConfigContext} store={configStore}><ConnectedComponent {...props}/></Provider>\n}\n\nconst addRoles = roles => dispatch => resolveRoles(roles, true).then(roles => dispatch({type: ACTIONS.MERGE_ROLES, roles}))\nconst removeRoles = roles => dispatch => resolveRoles(roles, false).then(roles => dispatch({type: ACTIONS.MERGE_ROLES, roles}))\nconst mergeRoles = roles => dispatch => resolveData(roles).then(roles => dispatch({type: ACTIONS.MERGE_ROLES, roles}))\nconst clearRoles = dispatch => dispatch({type: ACTIONS.CLEAR_ROLES})\n\nexport const wrapWithDispatch = (dispatch, obj) => Object.entries(obj).reduce((result, [key, value]) => (result[key] = (...args) => dispatch(value(...args)), result), {})\n\nexport const configPick = (...picked) => {\n  function mapDispatchToProps(dispatch) {\n    const result = {}\n    for (const pick of picked) {\n      switch (pick) {\n        case 'add':\n          result.addRoles = addRoles\n          break\n        case 'remove':\n          result.removeRoles = removeRoles\n          break\n        case 'merge':\n          result.mergeRoles = mergeRoles\n          break\n        case 'clear':\n          result.clearRoles = clearRoles\n          break\n      }\n    }\n    return wrapWithDispatch(dispatch, result)\n  }\n\n  function mapStateToProps(store, props) {\n    const result = {}\n    for (const pick of picked) {\n      switch (pick) {\n      }\n    }\n    return result\n  }\n  return configConnect({mapStateToProps, mapDispatchToProps})\n}\n"],"file":"index.js"}